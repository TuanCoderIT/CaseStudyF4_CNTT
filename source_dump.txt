# ==================================================
# Path: /Users/huynh04/Dev/phongtro/CaseStudyF4_CNTT
# Detected tech: javascript
# ==================================================

## DIRECTORY STRUCTURE
```
CaseStudyF4_CNTT/
├── .git/
├── Home/
│   └── index.php
├── admin/
│   ├── categories/
│   │   └── manage_categories.php
│   ├── deposits/
│   │   ├── manage_deposits.php
│   │   ├── refund_deposit.php
│   │   ├── release_deposit.php
│   │   └── view_deposit.php
│   ├── districts/
│   │   └── manage_districts.php
│   ├── rooms/
│   │   ├── add_room.php
│   │   ├── edit_room.php
│   │   ├── manage_rooms.php
│   │   ├── pending_rooms.php
│   │   └── user_rooms.php
│   ├── users/
│   │   ├── add_user.php
│   │   └── manage_users.php
│   ├── .DS_Store
│   ├── index.php
│   ├── manage_rooms.php
│   └── profile.php
├── api/
│   ├── location/
│   │   ├── get_coordinates.php
│   │   ├── reverse-here.php
│   │   └── save_coordinates.php
│   └── maps/
│       └── get_ip_location.php
├── assets/
│   ├── admin/
│   │   ├── css/
│   │   │   └── admin.css
│   │   └── js/
│   │       ├── add_room_validation.js
│   │       ├── edit_room_validation.js
│   │       ├── location-validation.js
│   │       ├── main.js
│   │       ├── vinh_location_integration.js
│   │       ├── vinh_location_utils.js
│   │       └── vinh_location_validator.js
│   ├── client/
│   │   └── css/
│   │       └── style.css
│   └── uploads/
│       └── avatars/
├── auth/
│   ├── edit_profile.php
│   ├── login.php
│   ├── login_handler.php
│   ├── logout.php
│   ├── register.php
│   └── register_handler.php
├── classes/
│   └── DualConfirmationSystem.php
├── components/
│   ├── admin_footer.php
│   ├── admin_header.php
│   ├── banner_search.php
│   ├── create_booking.php
│   ├── footer.php
│   ├── header.php
│   └── room_status_notification.php
├── config/
│   ├── config.php
│   ├── db.php
│   ├── favorites.php
│   └── vnpay.php
├── database/
├── room/
│   ├── booking_action.php
│   ├── booking_detail.php
│   ├── confirmation.php
│   ├── delete_room.php
│   ├── edit_room.php
│   ├── my_bookings.php
│   ├── my_favorite.php
│   ├── my_posted_rooms.php
│   ├── my_rooms.php
│   ├── notification_detail.php
│   ├── notifications.php
│   ├── post.php
│   ├── room_detail.php
│   ├── search.php
│   ├── toggle_is_exist_status.php
│   ├── toggle_rental_status.php
│   └── vnpay_return.php
├── uploads/
│   ├── avatar/
│   │   ├── avatar_1747801155_2313.jpg
│   │   ├── avatar_1747801182_5629.jpg
│   │   ├── avatar_1747809296_2038.jpg
│   │   ├── avatar_1748057885_1599.jpg
│   │   ├── avatar_1748087748_7310.png
│   │   ├── avatar_1748140402_9313.jpg
│   │   ├── avatar_1748166864_8824.jpg
│   │   ├── avatar_1748181018_4476.jpeg
│   │   ├── avatar_1748181802_8389.jpg
│   │   ├── avatar_1748184096_3435.jpg
│   │   ├── avatar_1748185099_4819.png
│   │   └── avatar_1748256537_9263.JPG
│   ├── banner/
│   │   ├── 1747820435_z2855400259529-10bc9fcf3c4b7da3c267a27fd9f3124a_1634531314.jpg
│   │   ├── 1747904854_500107773_2722267114627774_7367159711626814427_n.jpg
│   │   ├── 1747905030_499990681_9977864108926643_6198584699326133275_n.jpg
│   │   ├── 1748056149_pexels-lum3n-44775-406014.jpg
│   │   ├── 1748138747_63b548ae81a263fc3ab3_1551067966.jpg
│   │   ├── 1748153288_495134278_1256274172502463_1912486608493644426_n (1).jpg
│   │   ├── 1748154258_499857147_4184182368492144_8003637233330776640_n.jpg
│   │   ├── 1748154415_500120020_122230936556189794_7290920334073151472_n.jpg
│   │   ├── 1748158887_501240915_694560850182006_1576292844272358452_n.jpg
│   │   ├── 1748159454_495211684_1256274162502464_2149269544201324824_n (1).jpg
│   │   ├── 1748159489_495211684_1256274162502464_2149269544201324824_n (1).jpg
│   │   ├── 1748159504_495211684_1256274162502464_2149269544201324824_n (1).jpg
│   │   ├── 1748159727_495211684_1256274162502464_2149269544201324824_n (1).jpg
│   │   ├── 1748159752_495211684_1256274162502464_2149269544201324824_n (1).jpg
│   │   ├── 1748160041_495211684_1256274162502464_2149269544201324824_n (1).jpg
│   │   ├── 1748167052_phong-khach-vinhomes-ocean-park.jpg
│   │   ├── 1748181208_IMG_5093.webp
│   │   ├── 1748181512_trọ.jpg
│   │   ├── 1748183715_OIP.jpg
│   │   ├── 1748183825_Nhatro.6.jpg
│   │   ├── 1748184066_OIP (2).jpg
│   │   └── 1748184394_OIP (3).jpg
│   ├── quill/
│   │   └── 1747724546_photo-2-16446400216851972532173.jpeg
│   └── rooms/
│       ├── 1747765303_0_5395401_hinh-nen-girl-xinh-4k-cho-pc-03.webp
│       ├── 1747765303_1_5395432_hinh-nen-girl-xinh-4k-cho-pc-04.webp
│       ├── 1747765303_2_5395434_hinh-nen-girl-xinh-4k-cho-pc-05.webp
│       ├── 1747790958_0_5395401_hinh-nen-girl-xinh-4k-cho-pc-03.webp
│       ├── 1747790958_1_5395432_hinh-nen-girl-xinh-4k-cho-pc-04.webp
│       ├── 1747790958_2_5395434_hinh-nen-girl-xinh-4k-cho-pc-05.webp
│       ├── 1747791578_0_5395401_hinh-nen-girl-xinh-4k-cho-pc-03.webp
│       ├── 1747791578_1_5395432_hinh-nen-girl-xinh-4k-cho-pc-04.webp
│       ├── 1747791579_2_5395434_hinh-nen-girl-xinh-4k-cho-pc-05.webp
│       ├── 1747802244_1_photo-1-16446400187821764344412.png
│       ├── 1747802244_2_photo-1-16446400216191316154621.jpeg
│       ├── 1747802244_3_photo-2-16446400216851972532173.jpeg
│       ├── 1747820435_0_b6210c39c535276b7e24_1551067968.jpg
│       ├── 1747820435_1_z2855400230250-0407dd8ca845c5a00c19ac29a7728f68_1634531321.jpg
│       ├── 1747820435_2_z2855400236910-509061cc2c6e2d8478ebbcf128836c01_1634531320.jpg
│       ├── 1747820435_3_z2855400250427-8f5eee0957ec9d7ae9779b626107a049_1634531321.jpg
│       ├── 1747820435_4_z2855400259529-10bc9fcf3c4b7da3c267a27fd9f3124a_1634531314.jpg
│       ├── 1747820435_5_z2855400265005-8c866bb37a39e726bfbaa1ab9634753b_1634531320.jpg
│       ├── 1747841457_0_60eb11f6d8fa3aa463eb_1551067970.jpg
│       ├── 1747904854_0_499796835_2722267181294434_8024619422153518198_n.jpg
│       ├── 1747904854_1_499866893_2722267187961100_7462858564938584970_n.jpg
│       ├── 1747904854_2_499932212_2722267121294440_7444071810466581045_n.jpg
│       ├── 1747905030_0_498913603_9977864268926627_1597753980648069284_n.jpg
│       ├── 1747905030_1_499250549_9977864262259961_2852767426034860054_n.jpg
│       ├── 1747905030_2_499532684_9977864368926617_9022903704693140757_n.jpg
│       ├── 1747905030_3_499606779_9977864145593306_792390631925851312_n.jpg
│       ├── 1748056073_1_pexels-lum3n-44775-406014.jpg
│       ├── 1748056073_2_pexels-zhanqun-cai-1507025-3998488.jpg
│       ├── 1748153288_0_495211684_1256274162502464_2149269544201324824_n (1).jpg
│       ├── 1748153288_1_495211684_1256274162502464_2149269544201324824_n.jpg
│       ├── 1748153288_2_500107204_1419295455747986_2206032282926747300_n.jpg
│       ├── 1748153288_3_500223266_122132452808644095_5820341546088360600_n.jpg
│       ├── 1748153288_4_500320237_122166489098491768_3627075806094816023_n.jpg
│       ├── 1748154258_0_499825683_4184182375158810_6426505456004790655_n.jpg
│       ├── 1748154258_1_499857147_4184182368492144_8003637233330776640_n (1).jpg
│       ├── 1748160657_0_500107204_1419295455747986_2206032282926747300_n.jpg
│       ├── 1748160680_0_500107204_1419295455747986_2206032282926747300_n.jpg
│       ├── 1748160692_0_500107204_1419295455747986_2206032282926747300_n.jpg
│       ├── 1748160864_0_495211684_1256274162502464_2149269544201324824_n.jpg
│       ├── 1748160864_1_499825683_4184182375158810_6426505456004790655_n.jpg
│       ├── 1748160864_2_499857147_4184182368492144_8003637233330776640_n (1).jpg
│       ├── 1748167052_0_1606460581_z2095227097278_b87fd10ab66ff8c27a6744e100525527.jp.jpg
│       ├── 1748167052_1_1606460584_z2095227103526_f26fd57823676bde9b424859c5813f86.jp.jpg
│       ├── 1748167052_2_hinh-anh-can-ho-vinhomes-central -park-2-phong-ngu-thiet-ke-chi-tiet-so-2.jpg
│       ├── 1748167052_3_phong-khach-vinhomes-ocean-park.jpg
│       └── 1748181512_0_t.jpg
├── utils/
│   └── haversine.php
├── .DS_Store
├── backup.sql
├── f8.sql
├── index.php
├── readme.md
└── source_dump.txt
```

## FILE CONTENTS

### assets/admin/js/vinh_location_integration.js
```js
/**
 * Vinh Location Integration for Edit Room Page
 * This file handles location validation and geocoding for the edit room form
 */

$(document).ready(function () {
  // Override form submission to include Vinh location validation
  $("#roomForm").on("submit", function (e) {
    const lat = parseFloat($("#lat").val());
    const lng = parseFloat($("#lng").val());

    // Only validate if coordinates are provided
    if (lat && lng && !isNaN(lat) && !isNaN(lng)) {
      // Use the validation function from vinh_location_validator.js
      if (typeof validateVinhLocation === "function") {
        if (!validateVinhLocation(lat, lng, "location_error")) {
          e.preventDefault();

          // Scroll to error
          const errorElement = $("#location_error");
          if (errorElement.length) {
            $("html, body").animate(
              {
                scrollTop: errorElement.offset().top - 100,
              },
              500
            );
          }

          return false;
        }
      } else {
        // Fallback to inline validation if validator not loaded
        if (typeof isLocationInVinh === "function") {
          if (!isLocationInVinh(lat, lng)) {
            e.preventDefault();

            $("#location_error")
              .html(
                `
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                <i class="fas fa-exclamation-triangle mr-1"></i>
                                <strong>Lỗi!</strong> Vị trí không nằm trong thành phố Vinh. 
                                Vui lòng chọn lại vị trí trong phạm vi thành phố Vinh.
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                        `
              )
              .show();

            // Scroll to map
            const mapElement = $("#map").length
              ? $("#map")
              : $("#location_error");
            $("html, body").animate(
              {
                scrollTop: mapElement.offset().top - 100,
              },
              500
            );

            return false;
          }
        }
      }
    }

    return true;
  });

  // Enhanced browser location functionality
  $("#get_browser_location").on("click", function () {
    if (!navigator.geolocation) {
      $("#location_error")
        .html(
          `
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-triangle mr-1"></i>
                    Trình duyệt không hỗ trợ tính năng lấy vị trí.
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            `
        )
        .show();
      return;
    }

    const button = $(this);
    button
      .prop("disabled", true)
      .html(
        '<span class="spinner-border spinner-border-sm mr-1" role="status" aria-hidden="true"></span> Đang tìm vị trí...'
      );

    const successCallback = function (position) {
      button
        .prop("disabled", false)
        .html(
          '<i class="fas fa-crosshairs mr-1"></i> Lấy vị trí từ trình duyệt'
        );

      const lat = position.coords.latitude;
      const lng = position.coords.longitude;

      // Update coordinates
      $("#lat").val(lat);
      $("#lng").val(lng);
      $("#coordinates_display").val("Vĩ độ: " + lat + ", Kinh độ: " + lng);

      // Validate location is in Vinh
      if (typeof isLocationInVinh === "function") {
        if (!isLocationInVinh(lat, lng)) {
          $("#location_error")
            .html(
              `
                        <div class="alert alert-warning alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-triangle mr-1"></i>
                            <strong>Cảnh báo!</strong> Vị trí hiện tại không nằm trong thành phố Vinh. 
                            Vui lòng chọn một vị trí khác trong thành phố Vinh.
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    `
            )
            .show();
        } else {
          $("#location_error")
            .html(
              `
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <i class="fas fa-check-circle mr-1"></i>
                            Đã lấy vị trí thành công! Vị trí nằm trong thành phố Vinh.
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    `
            )
            .show();
        }
      }

      // Update map if available
      if (
        typeof map !== "undefined" &&
        map &&
        typeof marker !== "undefined" &&
        marker
      ) {
        map.setView([lat, lng], 16);
        marker.setLatLng([lat, lng]);
      } else if (typeof initMap === "function") {
        initMap(lat, lng);
      }
    };

    const errorCallback = function (error) {
      button
        .prop("disabled", false)
        .html(
          '<i class="fas fa-crosshairs mr-1"></i> Lấy vị trí từ trình duyệt'
        );

      let errorMsg = "Không thể lấy vị trí từ trình duyệt.";
      switch (error.code) {
        case error.PERMISSION_DENIED:
          errorMsg += " Bạn đã từ chối cho phép truy cập vị trí.";
          break;
        case error.POSITION_UNAVAILABLE:
          errorMsg += " Thông tin vị trí không khả dụng.";
          break;
        case error.TIMEOUT:
          errorMsg += " Yêu cầu vị trí đã hết thời gian.";
          break;
        default:
          errorMsg += " Đã xảy ra lỗi không xác định.";
          break;
      }

      $("#location_error")
        .html(
          `
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-triangle mr-1"></i>
                    ${errorMsg}
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            `
        )
        .show();
    };

    const options = {
      enableHighAccuracy: true,
      timeout: 10000,
      maximumAge: 60000, // Cache for 1 minute
    };

    navigator.geolocation.getCurrentPosition(
      successCallback,
      errorCallback,
      options
    );
  });
});

```

### assets/admin/js/main.js
```js
// Hàm hiển thị/ẩn mật khẩu
function togglePassword() {
  const passwordField = document.getElementById("password");
  const eyeIcon = document.querySelector(".password-toggle i");

  if (passwordField.type === "password") {
    passwordField.type = "text";
    eyeIcon.classList.remove("fa-eye");
    eyeIcon.classList.add("fa-eye-slash");
  } else {
    passwordField.type = "password";
    eyeIcon.classList.remove("fa-eye-slash");
    eyeIcon.classList.add("fa-eye");
  }
}

// Hàm để xem trước ảnh trước khi upload
function previewImage(input) {
  if (input.files && input.files[0]) {
    var reader = new FileReader();

    reader.onload = function (e) {
      document.getElementById("avatar-preview").src = e.target.result;
    };

    reader.readAsDataURL(input.files[0]);
  }
}

// Format price with thousand separators
function formatPrice(price) {
  return new Intl.NumberFormat("vi-VN").format(price);
}

// Update the price range filter display
function updatePriceDisplay(minValue, maxValue) {
  const priceDisplay = document.getElementById("price-display");
  if (priceDisplay) {
    if (maxValue >= 999999999) {
      priceDisplay.textContent = `Trên ${formatPrice(minValue)} đ`;
    } else {
      priceDisplay.textContent = `${formatPrice(minValue)} đ - ${formatPrice(
        maxValue
      )} đ`;
    }
  }
}

// Hiệu ứng cho form input và các trường nhập liệu
document.addEventListener("DOMContentLoaded", function () {
  // Hiệu ứng cho các trường input khi focus
  const inputs = document.querySelectorAll(".form-control");

  inputs.forEach((input) => {
    input.addEventListener("focus", function () {
      this.parentElement.classList.add("input-focus");
    });

    input.addEventListener("blur", function () {
      this.parentElement.classList.remove("input-focus");
    });
  });

  // Hiệu ứng khi hover vào form fields (chỉ áp dụng cho trang đăng ký)
  if (document.body.classList.contains("register-body")) {
    const formGroups = document.querySelectorAll(".mb-3, .mb-4");
    formGroups.forEach((group) => {
      group.addEventListener("mouseenter", function () {
        this.style.transform = "translateX(5px)";
        this.style.transition = "all 0.3s ease";
      });

      group.addEventListener("mouseleave", function () {
        this.style.transform = "translateX(0)";
      });
    });
  }

  // Hiệu ứng cho trang chỉnh sửa hồ sơ
  if (document.body.classList.contains("profile-body")) {
    // Hiệu ứng cho nút upload ảnh
    const fileUpload = document.querySelector(".custom-file-upload");
    if (fileUpload) {
      fileUpload.addEventListener("mouseenter", function () {
        this.style.transform = "translateY(-2px)";
      });

      fileUpload.addEventListener("mouseleave", function () {
        this.style.transform = "translateY(0)";
      });
    }

    // Hiệu ứng cho ảnh đại diện
    const avatarPreview = document.getElementById("avatar-preview");
    if (avatarPreview) {
      avatarPreview.addEventListener("mouseenter", function () {
        this.style.transform = "scale(1.05)";
      });

      avatarPreview.addEventListener("mouseleave", function () {
        this.style.transform = "scale(1)";
      });
    }
  }

  // Mobile filter toggle button
  const mobileFilterToggle = document.getElementById("mobile-filter-toggle");
  const filterSidebar = document.querySelector(".filter-sidebar");

  if (mobileFilterToggle && filterSidebar) {
    mobileFilterToggle.addEventListener("click", function () {
      filterSidebar.classList.toggle("show");

      // Change icon based on state
      const icon = mobileFilterToggle.querySelector("i");
      if (filterSidebar.classList.contains("show")) {
        icon.classList.remove("fa-filter");
        icon.classList.add("fa-times");
      } else {
        icon.classList.remove("fa-times");
        icon.classList.add("fa-filter");
      }
    });

    // Close filters when clicking outside
    document.addEventListener("click", function (e) {
      if (
        !filterSidebar.contains(e.target) &&
        e.target !== mobileFilterToggle &&
        !mobileFilterToggle.contains(e.target)
      ) {
        filterSidebar.classList.remove("show");
        const icon = mobileFilterToggle.querySelector("i");
        icon.classList.remove("fa-times");
        icon.classList.add("fa-filter");
      }
    });
  }

  // Collapsible filter sections for tablet and mobile
  const filterTitles = document.querySelectorAll(".filter-title");

  filterTitles.forEach((title) => {
    title.addEventListener("click", function () {
      if (window.innerWidth <= 991) {
        const content = this.parentElement.nextElementSibling;
        const toggle = this.querySelector(".filter-toggle");

        if (content.style.maxHeight) {
          content.style.maxHeight = null;
          toggle.classList.remove("active");
        } else {
          content.style.maxHeight = content.scrollHeight + "px";
          toggle.classList.add("active");
        }
      }
    });
  });

  initFilterAccordion();

  // Close filters when clicking the close button
  const closeFilterBtn = document.querySelector(".filter-sidebar .btn-close");

  if (closeFilterBtn && filterSidebar) {
    closeFilterBtn.addEventListener("click", function () {
      filterSidebar.classList.remove("show");
    });
  }

  // Check if we're on the home page
  if (document.body.classList.contains("home-body")) {
    setupHomePageAnimations();
  }

  // Check if we're on the search page
  if (document.body.classList.contains("search-body")) {
    setupSearchPageAnimations();
  }

  // Initialize all animations
  initScrollAnimations();

  // Initialize room detail page enhancements
  if (document.body.classList.contains("room-detail-body")) {
    initMobileImageZoom();
    initStickyRoomActions();
  }

  // Khởi tạo hiệu ứng nút yêu thích
  animateFavoriteButton();

  const urlParams = new URLSearchParams(window.location.search);
  const action = urlParams.get("action");

  if (action === "favorite" || action === "unfavorite") {
    const favoriteCounters = document.querySelectorAll(".favorite-counter");
    favoriteCounters.forEach((counter) => {
      counter.classList.add("animate__animated", "animate__heartBeat");
    });
  }
});

// Handle filter section toggle on mobile/tablet
function initFilterAccordion() {
  const filterTitles = document.querySelectorAll(".filter-title");

  filterTitles.forEach((title) => {
    title.addEventListener("click", function (e) {
      if (window.innerWidth <= 991) {
        // Get the filter content section
        const content = this.closest(".filter-header").nextElementSibling;
        const toggle = this.querySelector(".filter-toggle");

        if (content && toggle) {
          if (content.style.maxHeight) {
            content.style.maxHeight = null;
            toggle.classList.remove("active");
          } else {
            content.style.maxHeight = content.scrollHeight + "px";
            toggle.classList.add("active");
          }
        }
      }
    });
  });
}

// Animate elements when they come into view
function initScrollAnimations() {
  const animatedElements = document.querySelectorAll(".animated-element");

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("show");
          // Once the animation has played, we can stop observing
          observer.unobserve(entry.target);
        }
      });
    },
    {
      root: null, // Use the viewport
      threshold: 0.1, // Trigger when at least 10% of the element is visible
      rootMargin: "0px 0px -50px 0px", // Slightly before the element comes into view
    }
  );

  animatedElements.forEach((el) => {
    observer.observe(el);
  });
}

// Add animation classes to elements on the home page
function setupHomePageAnimations() {
  const sections = document.querySelectorAll(".home-body main section");
  sections.forEach((section, index) => {
    section.classList.add("animated-element");
    section.style.animationDelay = `${index * 0.2}s`;
  });

  const cards = document.querySelectorAll(".room-card");
  cards.forEach((card, index) => {
    card.classList.add("animated-element");
    card.style.animationDelay = `${(index % 4) * 0.1}s`;
  });
}

// Add animation classes to search page elements
function setupSearchPageAnimations() {
  const sidebar = document.querySelector(".filter-sidebar");
  if (sidebar) {
    sidebar.classList.add("animated-element");
  }

  const cards = document.querySelectorAll(".search-body .room-card");
  cards.forEach((card, index) => {
    card.classList.add("animated-element");
    card.style.animationDelay = `${(index % 3) * 0.1}s`;
  });
}

// Mobile image zoom functionality for room detail page
function initMobileImageZoom() {
  // Only run on mobile devices
  if (window.innerWidth <= 767) {
    const galleryImages = document.querySelectorAll(
      ".room-gallery .swiper-slide img"
    );

    galleryImages.forEach((img) => {
      // Add mobile-zoom class to each image
      img.classList.add("mobile-zoom");

      // Add click event
      img.addEventListener("click", function () {
        // Create a fullscreen container
        const zoomContainer = document.createElement("div");
        zoomContainer.className = "mobile-zoom active";

        // Create close button
        const closeButton = document.createElement("button");
        closeButton.className = "zoom-close";
        closeButton.innerHTML = '<i class="fas fa-times"></i>';

        // Clone the image
        const zoomedImg = this.cloneNode(true);

        // Append elements
        zoomContainer.appendChild(zoomedImg);
        zoomContainer.appendChild(closeButton);
        document.body.appendChild(zoomContainer);

        // Add no-scroll class to body
        document.body.style.overflow = "hidden";

        // Close functionality
        closeButton.addEventListener("click", function () {
          zoomContainer.remove();
          document.body.style.overflow = "";
        });

        // Also close on click anywhere
        zoomContainer.addEventListener("click", function (e) {
          if (e.target === zoomContainer) {
            zoomContainer.remove();
            document.body.style.overflow = "";
          }
        });
      });
    });
  }
}

// Add sticky action bar for mobile on room detail page
function initStickyRoomActions() {
  if (
    window.innerWidth <= 767 &&
    document.body.classList.contains("room-detail-body")
  ) {
    const roomActions = document.querySelector(".room-actions");

    if (roomActions) {
      // Create a clone of the actions for the sticky bar
      const stickyActions = document.createElement("div");
      stickyActions.className = "room-actions-sticky";

      // Get all action buttons and clone them
      const actionButtons = roomActions.querySelectorAll(".btn");
      actionButtons.forEach((btn) => {
        const cloneBtn = btn.cloneNode(true);
        // Simplify text for mobile
        const btnText = cloneBtn.textContent.trim();
        const btnIcon = cloneBtn.querySelector("i").outerHTML;

        if (btnText.includes("Liên hệ")) {
          cloneBtn.innerHTML = `${btnIcon} Liên hệ`;
        } else if (btnText.includes("Chia sẻ")) {
          cloneBtn.innerHTML = `${btnIcon} Chia sẻ`;
        } else if (btnText.includes("Báo cáo")) {
          cloneBtn.innerHTML = `${btnIcon} Báo cáo`;
        }

        stickyActions.appendChild(cloneBtn);
      });

      // Append to body
      document.body.appendChild(stickyActions);
    }
  }
}

// Hiệu ứng cho nút yêu thích
function animateFavoriteButton() {
  const favoriteButton = document.querySelector(".favorite-btn");
  if (favoriteButton) {
    favoriteButton.addEventListener("click", function (e) {
      const icon = this.querySelector("i");
      const isAdding = icon.classList.contains("far"); // Kiểm tra nếu đang thêm yêu thích

      // Hiệu ứng khi nhấn nút
      this.classList.add("btn-pulse");
      setTimeout(() => {
        this.classList.remove("btn-pulse");
      }, 500);

      // Hiển thị thông báo nổi tạm thời
      const toastMessage = isAdding
        ? "Đã thêm vào danh sách yêu thích!"
        : "Đã xóa khỏi danh sách yêu thích!";
      const toastClass = isAdding ? "bg-success" : "bg-warning text-dark";

      const toast = document.createElement("div");
      toast.className = `toast-notification ${toastClass} animate__animated animate__fadeIn`;
      toast.innerHTML = `<i class="fas ${
        isAdding ? "fa-check-circle" : "fa-exclamation-circle"
      } me-2"></i>${toastMessage}`;

      document.body.appendChild(toast);

      setTimeout(() => {
        toast.classList.remove("animate__fadeIn");
        toast.classList.add("animate__fadeOut");
        setTimeout(() => {
          toast.remove();
        }, 500);
      }, 2000);
    });
  }
}

// Hiệu ứng cho favorite counter trong header
function updateFavoriteCounter(count) {
  const counter = document.querySelector(".favorite-counter");
  if (counter) {
    // Lưu giá trị cũ
    const oldValue = parseInt(counter.textContent);

    // Cập nhật giá trị mới
    counter.textContent = count;

    // Thêm hiệu ứng dựa trên thay đổi
    if (count > oldValue) {
      counter.classList.add("animate__animated", "animate__heartBeat");
    } else if (count < oldValue) {
      counter.classList.add("animate__animated", "animate__fadeOut");
      setTimeout(() => {
        counter.classList.remove("animate__fadeOut");
        counter.classList.add("animate__fadeIn");
      }, 300);
    }

    // Xóa class sau khi animation hoàn tất
    setTimeout(() => {
      counter.classList.remove("animate__heartBeat", "animate__fadeIn");
    }, 1000);
  }
}

function getLocation() {
  return new Promise((resolve, reject) => {
    if (!navigator.geolocation) {
      reject("Trình duyệt không hỗ trợ định vị.");
      return;
    }

    navigator.geolocation.getCurrentPosition(
      async function (pos) {
        try {
          const lat = pos.coords.latitude;
          const lng = pos.coords.longitude;
          console.log("Tọa độ hiện tại:", lat, lng);

          const res = await fetch("/api/location/reverse-here.php", {
            method: "POST",
            headers: {
              "Content-Type": "application/x-www-form-urlencoded",
            },
            body: new URLSearchParams({
              lat,
              lng,
            }),
          });

          const data = await res.json();
          resolve(data);
        } catch (error) {
          reject(error);
        }
      },
      (error) => {
        reject("Không thể lấy vị trí: " + error.message);
      }
    );
  });
}

```

### assets/admin/js/vinh_location_utils.js
```js
/**
 * Utility functions for validating Vinh city locations
 * This file works with the haversine.php utility in the backend
 */

// Tọa độ trung tâm thành phố Vinh (sử dụng tọa độ của Đại học Vinh)
const VINH_LAT = 18.65782;
const VINH_LNG = 105.69636;

/**
 * Kiểm tra xem một vị trí có nằm trong thành phố Vinh hay không
 * sử dụng công thức Haversine để tính khoảng cách
 *
 * @param {number} lat - Vĩ độ của điểm cần kiểm tra
 * @param {number} lng - Kinh độ của điểm cần kiểm tra
 * @param {number} radius - Bán kính giới hạn tính từ trung tâm thành phố Vinh (mặc định: 15km)
 * @returns {boolean} - true nếu vị trí nằm trong bán kính của Vinh, false nếu không
 */
function isLocationInVinh(lat, lng, radius = 15) {
  // Kiểm tra đầu vào
  if (!lat || !lng || isNaN(lat) || isNaN(lng)) {
    console.warn("isLocationInVinh: Invalid coordinates provided", lat, lng);
    return false;
  }

  // Hằng số
  const R = 6371; // Bán kính Trái Đất (km)

  // Chuyển đổi độ sang radian
  const dLat = ((lat - VINH_LAT) * Math.PI) / 180;
  const dLon = ((lng - VINH_LNG) * Math.PI) / 180;

  // Công thức Haversine
  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos((VINH_LAT * Math.PI) / 180) *
      Math.cos((lat * Math.PI) / 180) *
      Math.sin(dLon / 2) *
      Math.sin(dLon / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  const distance = R * c;

  console.log("Khoảng cách đến trung tâm Vinh:", distance.toFixed(2) + "km");

  // Trả về true nếu trong bán kính của Vinh
  return distance <= radius;
}

/**
 * Hiển thị cảnh báo khi vị trí không nằm trong Vinh
 *
 * @param {string} elementId - ID của phần tử HTML để hiển thị cảnh báo
 * @param {boolean} scrollTo - Có cuộn trang đến vị trí cảnh báo hay không
 */
function showLocationError(elementId = "location_error", scrollTo = true) {
  const errorElement = $("#" + elementId);

  errorElement
    .html(
      `
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle mr-1"></i>
            <strong>Lỗi!</strong> Vị trí không nằm trong thành phố Vinh. 
            Vui lòng chọn lại vị trí trong phạm vi thành phố Vinh.
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    `
    )
    .show();

  // Cuộn trang đến vị trí cảnh báo
  if (scrollTo) {
    const mapElement = $("#map").length ? $("#map") : errorElement;
    $("html, body").animate(
      {
        scrollTop: mapElement.offset().top - 100,
      },
      500
    );
  }
}

```

### assets/admin/js/add_room_validation.js
```js
// Validation script for room form
$(document).ready(function () {
  // Add form validation for coordinates
  $("#roomForm").on("submit", function (e) {
    // Check if latitude and longitude are set
    var latitude = $("#latitude").val().trim();
    var longitude = $("#longitude").val().trim();

    if (!latitude || !longitude) {
      e.preventDefault(); // Prevent form submission
      $("#coordinatesError").show(); // Show error message

      // Scroll to the error message
      $("html, body").animate(
        {
          scrollTop: $("#coordinatesError").offset().top - 100,
        },
        200
      );

      // Hide the message after 5 seconds
      setTimeout(function () {
        $("#coordinatesError").fadeOut();
      }, 5000);

      return false;
    }

    return true; // Allow form submission
  });
});

// Biến toàn cục
let map = null;
let marker = null;
let isManualLocation = false;
let quill = null;

// Khởi tạo Quill editor
document.addEventListener("DOMContentLoaded", function () {
  // Khởi tạo Quill
  quill = new Quill("#editor-container", {
    theme: "snow",
    placeholder: "Mô tả chi tiết về phòng trọ...",
    modules: {
      toolbar: {
        container: [
          ["bold", "italic", "underline"],
          [{ header: 1 }, { header: 2 }],
          [{ list: "ordered" }, { list: "bullet" }],
          ["image", "link"],
        ],
        handlers: {
          image: function () {
            selectLocalImage();
          },
        },
      },
    },
  });

  // Xử lý form submit
  document.getElementById("roomForm").addEventListener("submit", function (e) {
    e.preventDefault(); // Ngăn form submit mặc định

    // Kiểm tra các trường bắt buộc
    if (!validateForm()) {
      return false;
    }

    // Cập nhật các giá trị ẩn
    updateHiddenValues();

    // Submit form
    this.submit();
  });

  // Xử lý hiển thị tên file đã chọn
  document.querySelectorAll(".custom-file-input").forEach((input) => {
    input.addEventListener("change", function () {
      const fileName =
        this.files.length > 1
          ? `${this.files.length} files selected`
          : this.files[0].name;
      this.nextElementSibling.textContent = fileName;
    });
  });

  // Xử lý preview ảnh banner
  document
    .getElementById("banner_image")
    .addEventListener("change", function () {
      previewImage(this.files[0], "banner_preview", ".banner-preview");
    });

  // Xử lý preview nhiều ảnh
  document
    .getElementById("additional_images")
    .addEventListener("change", function () {
      const preview = document.getElementById("additional_images_preview");
      preview.innerHTML = "";

      if (this.files) {
        Array.from(this.files).forEach((file) => {
          const div = document.createElement("div");
          div.className = "col-md-4 mb-2";
          preview.appendChild(div);
          previewImage(file, null, div);
        });
      }
    });

  // Xử lý tiện ích
  document
    .querySelectorAll('input[name="utility_items[]"]')
    .forEach((input) => {
      input.addEventListener("change", updateSelectedUtilitiesDisplay);
    });
  updateSelectedUtilitiesDisplay();

  // Khởi tạo tooltips
  document.querySelectorAll('[data-toggle="tooltip"]').forEach((element) => {
    new bootstrap.Tooltip(element);
  });

  // Khởi tạo giá trị mặc định
  initializeDefaultValues();

  // Xử lý sự kiện khi chọn phường/xã
  document.getElementById("ward").addEventListener("change", function () {
    handleWardChange(this);
  });

  // Xử lý sự kiện khi nhập địa chỉ chi tiết
  document
    .getElementById("address_detail")
    .addEventListener("input", function () {
      updateFullAddressPreview();
    });

  // Xử lý sự kiện khi click nút hiển thị bản đồ
  document
    .getElementById("show_map_manual")
    .addEventListener("click", function () {
      initMap();
      updateStatus(
        "Hãy click vào vị trí phòng trọ trên bản đồ để chọn tọa độ.",
        "info"
      );
    });

  // Xử lý sự kiện khi click nút khôi phục tự động
  document
    .getElementById("reset_coordinates")
    .addEventListener("click", resetCoordinates);
});

// Hàm kiểm tra form
function validateForm() {
  // Kiểm tra phường/xã
  if (!document.getElementById("ward").value) {
    alert("Vui lòng chọn Phường/Xã");
    return false;
  }

  // Kiểm tra tọa độ
  if (
    !document.getElementById("latitude").value ||
    !document.getElementById("longitude").value
  ) {
    alert("Vui lòng chọn vị trí trên bản đồ");
    document.getElementById("map_manual_select").style.display = "block";
    return false;
  }

  // Kiểm tra các trường bắt buộc khác
  const requiredFields = [
    "title",
    "price",
    "area",
    "address_detail",
    "phone",
    "category_id",
  ];
  for (const field of requiredFields) {
    if (!document.getElementById(field).value.trim()) {
      alert(
        `Vui lòng nhập ${document
          .getElementById(field)
          .getAttribute("placeholder")}`
      );
      document.getElementById(field).focus();
      return false;
    }
  }

  return true;
}

// Hàm cập nhật các giá trị ẩn
function updateHiddenValues() {
  // Cập nhật ward_name
  const selectedWard =
    document.getElementById("ward").options[
      document.getElementById("ward").selectedIndex
    ].text;
  document.getElementById("ward_name").value = selectedWard;

  // Cập nhật district_name và province_name
  document.getElementById("district_name").value = "Thành phố Vinh";
  document.getElementById("province_name").value = "Nghệ An";

  // Cập nhật utilities
  const selectedUtilities = Array.from(
    document.querySelectorAll('input[name="utility_items[]"]:checked')
  ).map((input) => input.value);
  document.getElementById("utilities").value = selectedUtilities.join(", ");

  // Cập nhật description
  document.getElementById("description").value = quill.root.innerHTML;
}

// Hàm preview ảnh
function previewImage(file, previewId, container) {
  if (!file) return;

  const reader = new FileReader();
  reader.onload = function (e) {
    if (previewId) {
      document.getElementById(previewId).src = e.target.result;
      document.querySelector(container).style.display = "block";
    } else {
      container.innerHTML = `<img src="${e.target.result}" class="img-fluid rounded additional-image">`;
    }
  };
  reader.readAsDataURL(file);
}

// Hàm xử lý chọn ảnh local
function selectLocalImage() {
  const input = document.createElement("input");
  input.setAttribute("type", "file");
  input.setAttribute("accept", "image/*");
  input.click();

  input.onchange = async () => {
    const file = input.files[0];
    if (!file) return;

    if (!/^image\//.test(file.type)) {
      alert("Vui lòng chọn file ảnh hợp lệ");
      return;
    }

    try {
      const formData = new FormData();
      formData.append("image", file);

      const response = await fetch(
        "../api/ckeditor_upload/ckeditor_upload.php",
        {
          method: "POST",
          body: formData,
        }
      );

      const result = await response.json();
      if (result.url) {
        insertToEditor(result.url);
      } else {
        throw new Error("Upload failed");
      }
    } catch (error) {
      alert("Lỗi khi tải ảnh: " + error.message);
    }
  };
}

// Hàm chèn ảnh vào editor
function insertToEditor(url) {
  const range = quill.getSelection();
  quill.insertEmbed(range.index, "image", url);
}

// Hàm cập nhật hiển thị tiện ích đã chọn
function updateSelectedUtilitiesDisplay() {
  const selected = Array.from(
    document.querySelectorAll('input[name="utility_items[]"]:checked')
  ).map((input) => input.value);

  const displayElement = document.getElementById("selected_utilities");
  if (selected.length > 0) {
    displayElement.innerHTML = `<i class="fas fa-check-circle text-success mr-1"></i> Đã chọn: ${selected.join(
      ", "
    )}`;
  } else {
    displayElement.innerHTML =
      '<i class="fas fa-info-circle text-muted mr-1"></i> Chưa có tiện ích nào được chọn';
  }

  document.getElementById("utilities").value = selected.join(", ");
}

// Hàm khởi tạo giá trị mặc định
function initializeDefaultValues() {
  document.getElementById("district_id").value = "1";
  document.getElementById("district_name").value = "Thành phố Vinh";
  document.getElementById("province_name").value = "Nghệ An";
  document.getElementById("map_manual_select").style.display = "block";
}

// Hàm xử lý khi thay đổi phường/xã
function handleWardChange(select) {
  const selectedOption = select.options[select.selectedIndex];
  const wardId = selectedOption.value;
  const wardName = selectedOption.text;

  if (!wardId || !wardName) return;

  document.getElementById("ward").value = wardName;
  document.getElementById("district_id").value = wardId;
  isManualLocation = false;

  if (!document.getElementById("district_name").value) {
    document.getElementById("district_name").value = "Thành phố Vinh";
  }
  if (!document.getElementById("province_name").value) {
    document.getElementById("province_name").value = "Nghệ An";
  }

  document.getElementById("map_manual_select").style.display = "block";
  updateFullAddressPreview();
}

// Hàm khởi tạo bản đồ
function initMap(lat = 18.679585, lng = 105.681335) {
  // Xóa bản đồ cũ nếu có
  if (map) {
    map.remove();
  }

  // Hiển thị bản đồ
  document.getElementById("map").style.display = "block";
  document.getElementById("map_message").style.display = "none";

  // Khởi tạo bản đồ mới
  map = L.map("map").setView([lat, lng], 15);
  L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
    maxZoom: 19,
    attribution: "© OpenStreetMap",
  }).addTo(map);

  // Thêm marker
  marker = L.marker([lat, lng], {
    draggable: true,
  })
    .addTo(map)
    .bindPopup("Vị trí của phòng trọ. Kéo để thay đổi vị trí.")
    .openPopup();

  // Xử lý sự kiện kéo thả marker
  marker.on("dragend", function (event) {
    const position = marker.getLatLng();
    updateCoordinates(position.lat, position.lng);
  });

  // Xử lý sự kiện click vào bản đồ
  map.on("click", function (e) {
    if (marker) {
      marker.setLatLng(e.latlng);
    } else {
      marker = L.marker(e.latlng, {
        draggable: true,
      }).addTo(map);
    }
    updateCoordinates(e.latlng.lat, e.latlng.lng);
  });
}

// Hàm cập nhật tọa độ
function updateCoordinates(lat, lng) {
  lat = parseFloat(lat).toFixed(6);
  lng = parseFloat(lng).toFixed(6);

  document.getElementById("coordinates_display").value = `${lat}, ${lng}`;
  document.getElementById("latitude").value = lat;
  document.getElementById("longitude").value = lng;

  isManualLocation = true;
  updateStatus("Đã cập nhật tọa độ thủ công!", "success");

  // Lấy địa chỉ từ tọa độ
  reverseGeocode(lat, lng);
}

// Hàm cập nhật trạng thái
function updateStatus(message, type = "info") {
  const statusDiv = document.getElementById("geocode_status");
  const icon =
    type === "success"
      ? "check-circle"
      : type === "warning"
      ? "exclamation-circle"
      : "spinner fa-spin";

  statusDiv.innerHTML = `
        <div class="text-${type}">
            <i class="fas fa-${icon}"></i> ${message}
        </div>
    `;

  if (type !== "info") {
    setTimeout(() => {
      statusDiv.innerHTML = "";
    }, 3000);
  }
}

// Hàm lấy tọa độ từ địa chỉ
async function getCoordinatesFromAddress() {
  // Kiểm tra điều kiện
  const addressDetail = document.getElementById("address_detail").value.trim();
  const wardName = document.getElementById("ward").value;

  if (!addressDetail || !wardName) {
    updateStatus(
      "Cần nhập địa chỉ chi tiết và chọn phường/xã để tìm tọa độ.",
      "warning"
    );
    return;
  }

  if (isManualLocation) {
    updateStatus(
      'Bạn đã chọn vị trí thủ công. Để sử dụng tọa độ tự động, hãy nhấn "Khôi phục tự động".',
      "warning"
    );
    return;
  }

  updateStatus("Đang tự động tìm tọa độ...", "info");

  // Tạo địa chỉ đầy đủ
  const fullAddress = [
    addressDetail,
    wardName,
    document.getElementById("district_name").value,
    document.getElementById("province_name").value,
    "Vietnam",
  ]
    .filter(Boolean)
    .join(", ");

  try {
    const response = await fetch("../../admin/api/maps/get_coordinates.php", {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
      },
      body: `address=${encodeURIComponent(fullAddress)}`,
    });

    const data = await response.json();

    if (data.success) {
      document.getElementById(
        "coordinates_display"
      ).value = `${data.lat}, ${data.lng}`;
      document.getElementById("latitude").value = data.lat;
      document.getElementById("longitude").value = data.lng;

      updateStatus(
        `Đã tìm tọa độ tự động! Địa chỉ: ${
          data.formatted_address || "Không có thông tin"
        }`,
        "success"
      );

      document.getElementById("map").style.display = "block";
      document.getElementById("map_message").style.display = "none";

      initMap(data.lat, data.lng);
    } else {
      throw new Error(data.message || "Không thể tìm thấy tọa độ");
    }
  } catch (error) {
    console.error("Error:", error);
    updateStatus(
      `Lỗi: ${error.message}. Vui lòng chọn vị trí thủ công trên bản đồ.`,
      "warning"
    );
    document.getElementById("map_manual_select").style.display = "block";
    initMap();
  }
}

// Hàm lấy địa chỉ từ tọa độ
async function reverseGeocode(lat, lng) {
  updateStatus("Đang tìm thông tin địa chỉ từ tọa độ...", "info");

  try {
    const response = await fetch(
      `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&zoom=18&addressdetails=1`,
      {
        headers: {
          Accept: "application/json",
          "Accept-Language": "vi,en-US;q=0.9,en;q=0.8",
        },
      }
    );

    const data = await response.json();

    if (data && data.address) {
      let addressDetail = "";
      if (data.address.road) addressDetail += data.address.road;
      if (data.address.house_number) {
        addressDetail =
          data.address.house_number +
          (addressDetail ? ", " + addressDetail : "");
      }

      if (addressDetail) {
        document.getElementById("address_detail").value = addressDetail;
      }

      updateFullAddressPreview();
      updateStatus("Đã cập nhật thông tin địa chỉ!", "success");
    }
  } catch (error) {
    console.error("Error:", error);
    updateStatus("Không thể lấy thông tin địa chỉ từ tọa độ.", "warning");
  }
}

// Hàm cập nhật preview địa chỉ đầy đủ
function updateFullAddressPreview() {
  const addressDetail = document.getElementById("address_detail").value.trim();
  const wardName = document.getElementById("ward").value;

  const districtName =
    document.getElementById("district_name").value || "Thành phố Vinh";
  const provinceName =
    document.getElementById("province_name").value || "Nghệ An";

  const parts = [addressDetail, wardName, districtName, provinceName].filter(
    Boolean
  );
  const fullAddress = parts.join(", ");

  const previewElement = document.getElementById("full_address_preview");
  previewElement.innerHTML =
    fullAddress ||
    '<i class="text-muted">Địa chỉ sẽ hiển thị ở đây sau khi chọn đầy đủ thông tin</i>';

  if (wardName && provinceName && !isManualLocation) {
    getCoordinatesFromAddress();
  }
}

// Hàm khôi phục chế độ tự động
function resetCoordinates() {
  isManualLocation = false;
  document.getElementById("coordinates_display").value = "";
  document.getElementById("latitude").value = "";
  document.getElementById("longitude").value = "";
  updateStatus("Đã khôi phục chế độ tự động tìm tọa độ.", "info");
  updateFullAddressPreview();
}

```

### assets/admin/js/edit_room_validation.js
```js
// Edit room validation script
$(document).ready(function () {
  // Extract coordinates from the latlng field if available
  var latlng = $("#latlng").val();
  if (latlng) {
    var coordinates = latlng.split(",");
    if (coordinates.length === 2) {
      var lat = parseFloat(coordinates[0].trim());
      var lng = parseFloat(coordinates[1].trim());

      if (!isNaN(lat) && !isNaN(lng)) {
        $("#lat").val(lat);
        $("#lng").val(lng);
        if (typeof initMap === "function") {
          initMap(lat, lng);
        }
      }
    }
  }

  // Add form validation for coordinates
  $("#roomForm").on("submit", function (e) {
    // Check if latitude and longitude are set
    var latitude = $("#lat").val().trim();
    var longitude = $("#lng").val().trim();

    if (!latitude || !longitude) {
      e.preventDefault(); // Prevent form submission
      $("#location_error")
        .html(
          '<div class="alert alert-danger alert-dismissible fade show" role="alert">' +
            '<i class="fas fa-exclamation-triangle mr-1"></i>' +
            "<strong>Lỗi!</strong> Vui lòng chọn vị trí trên bản đồ." +
            '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' +
            '<span aria-hidden="true">&times;</span>' +
            "</button>" +
            "</div>"
        )
        .show();

      // Scroll to the map
      $("html, body").animate(
        {
          scrollTop: $("#map-container").offset().top - 100,
        },
        200
      );

      return false;
    }

    // Check if the location is within Vinh city using the function from vinh_location_validator.js
    if (!isLocationInVinh(parseFloat(latitude), parseFloat(longitude))) {
      e.preventDefault(); // Prevent form submission

      // Sử dụng hàm showLocationError từ file vinh_location_validator.js
      showLocationError("location_error", true);

      return false;
    }

    return true; // Allow form submission
  });

  // Function to check if coordinates are within Vinh city (15km radius)
  function isLocationInVinh(lat, lng) {
    if (!lat || !lng || isNaN(lat) || isNaN(lng)) {
      return false;
    }

    var vinhLat = 18.6667;
    var vinhLng = 105.6667;
    var R = 6371; // Earth radius in km
    var dLat = ((lat - vinhLat) * Math.PI) / 180;
    var dLon = ((lng - vinhLng) * Math.PI) / 180;
    var a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos((vinhLat * Math.PI) / 180) *
        Math.cos((lat * Math.PI) / 180) *
        Math.sin(dLon / 2) *
        Math.sin(dLon / 2);
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    var distance = R * c;

    return distance <= 15; // Within 15km of Vinh city center
  }
});

```

### assets/admin/js/location-validation.js
```js

```

### assets/admin/js/vinh_location_validator.js
```js
/**
 * Vinh Location Validator - Form validation for Vinh city locations
 * This file works with vinh_location_utils.js for location validation
 */

/**
 * Validates location inputs and shows appropriate messages
 * @param {number} lat - Latitude
 * @param {number} lng - Longitude
 * @param {string} errorElementId - ID of error display element
 * @returns {boolean} - true if location is valid for Vinh city
 */
function validateVinhLocation(lat, lng, errorElementId = "location_error") {
  // Clear previous errors
  $("#" + errorElementId)
    .empty()
    .hide();

  // Check if coordinates are provided
  if (!lat || !lng || isNaN(lat) || isNaN(lng)) {
    showValidationError("Vui lòng cung cấp tọa độ hợp lệ.", errorElementId);
    return false;
  }

  // Check if location is within Vinh city using utility function
  if (typeof isLocationInVinh === "function") {
    if (!isLocationInVinh(lat, lng)) {
      showLocationError(errorElementId, true);
      return false;
    } else {
      showValidationSuccess(
        "Vị trí hợp lệ trong thành phố Vinh.",
        errorElementId
      );
      return true;
    }
  } else {
    console.error(
      "isLocationInVinh function not found. Please include vinh_location_utils.js"
    );
    showValidationError(
      "Lỗi hệ thống: Không thể kiểm tra vị trí.",
      errorElementId
    );
    return false;
  }
}

/**
 * Shows validation error message
 * @param {string} message - Error message to display
 * @param {string} elementId - ID of element to show error in
 */
function showValidationError(message, elementId = "location_error") {
  const errorElement = $("#" + elementId);

  errorElement
    .html(
      `
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle mr-1"></i>
            <strong>Lỗi!</strong> ${message}
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    `
    )
    .show();
}

/**
 * Shows validation success message
 * @param {string} message - Success message to display
 * @param {string} elementId - ID of element to show message in
 */
function showValidationSuccess(message, elementId = "location_error") {
  const errorElement = $("#" + elementId);

  errorElement
    .html(
      `
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle mr-1"></i>
            ${message}
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    `
    )
    .show();
}

/**
 * Validates form before submission
 * @param {string} latInputId - ID of latitude input field
 * @param {string} lngInputId - ID of longitude input field
 * @param {string} errorElementId - ID of error display element
 * @returns {boolean} - true if validation passes
 */
function validateFormLocation(
  latInputId = "lat",
  lngInputId = "lng",
  errorElementId = "location_error"
) {
  const lat = parseFloat($("#" + latInputId).val());
  const lng = parseFloat($("#" + lngInputId).val());

  return validateVinhLocation(lat, lng, errorElementId);
}

/**
 * Sets up form validation on submit
 * @param {string} formId - ID of the form to validate
 * @param {string} latInputId - ID of latitude input
 * @param {string} lngInputId - ID of longitude input
 * @param {string} errorElementId - ID of error display element
 */
function setupFormValidation(
  formId = "room_form",
  latInputId = "lat",
  lngInputId = "lng",
  errorElementId = "location_error"
) {
  $("#" + formId).on("submit", function (e) {
    const lat = parseFloat($("#" + latInputId).val());
    const lng = parseFloat($("#" + lngInputId).val());

    // Only validate if coordinates are provided
    if (lat && lng && !isNaN(lat) && !isNaN(lng)) {
      if (!validateVinhLocation(lat, lng, errorElementId)) {
        e.preventDefault(); // Stop form submission

        // Scroll to error message
        const errorElement = $("#" + errorElementId);
        if (errorElement.length) {
          $("html, body").animate(
            {
              scrollTop: errorElement.offset().top - 100,
            },
            500
          );
        }

        return false;
      }
    }

    return true;
  });
}

// Auto-setup when document is ready
$(document).ready(function () {
  // Check if we're on a room form page
  if ($("#room_form").length || $("#lat").length || $("#lng").length) {
    setupFormValidation();
  }
});

```
